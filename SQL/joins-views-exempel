-- exempel fr√•n lektion 2025-02-06

CREATE TABLE orders (order_id INT PRIMARY KEY AUTO_INCREMENT,
order_date DATE,
customer_id INT,
FOREIGN KEY (customer_id) REFERENCES customers(id));


CREATE TABLE customers(id INT PRIMARY KEY AUTO_INCREMENT,
						name TEXT);
                        
CREATE TABLE products(id INT PRIMARY KEY AUTO_INCREMENT,
						name TEXT,
                        price INT);
                        
UPDATE products SET price = 5 WHERE id = 3; 
                        
CREATE TABLE order_details(id INT PRIMARY KEY AUTO_INCREMENT, 
order_id INT, 
product_id INT, 
quantity INT,
FOREIGN KEY (product_id) REFERENCES products(id),
FOREIGN KEY (order_id) REFERENCES orders(order_id));
                        
                        
                        -- INSERTS
INSERT INTO customers (name) VALUES ('BIll'), ('Bosse'), ('Benny');
INSERT INTO orders (order_date, customer_id) VALUES (current_date(), 1),(current_date(), 1), (current_date(), 2);
INSERT INTO orders (order_date) VALUES (current_date());

INSERT INTO products (name, price) VALUES ('apple', 10),('Orange', 15), ('Banana', 7);
INSERT INTO order_details(order_id, product_id, quantity) VALUES (1,3,3),(1,2,2),(2,3,7),(3,1,2),(3,2,2),(3,3,2);



-- JOINS

SELECT customers.name, orders.order_date FROM
customers JOIN orders
ON customers.id = orders.customer_id;

SELECT customers.name, orders.order_date FROM
customers LEFT JOIN orders
ON customers.id = orders.customer_id;

SELECT customers.name, orders.order_date, orders.order_id FROM
orders RIGHT JOIN customers
ON customers.id = orders.customer_id;

-- serial joins
SELECT orders.order_id, customers.name, products.name, order_details.quantity FROM
orders INNER JOIN customers ON orders.customer_id = customers.id
INNER JOIN order_details ON orders.order_id = order_details.order_id
INNER JOIN products ON order_details.product_id = products.id 
WHERE customers.name = 'Bill';

SELECT orders.order_id, customers.name, products.name AS product_name, products.price, order_details.quantity, (products.price * order_details.quantity) AS total_per_product
FROM
orders INNER JOIN customers ON orders.customer_id = customers.id
INNER JOIN order_details ON orders.order_id = order_details.order_id
INNER JOIN products ON order_details.product_id = products.id 
;

-- VIEWS
CREATE VIEW oder_status AS
SELECT orders.order_id, customers.name, products.name AS product_name, products.price, order_details.quantity, (products.price * order_details.quantity) AS total_per_product
FROM
orders INNER JOIN customers ON orders.customer_id = customers.id
INNER JOIN order_details ON orders.order_id = order_details.order_id
INNER JOIN products ON order_details.product_id = products.id 
;



SELECT product_name, price FROM oder_status WHERE order_id = 1;


SELECT * FROM customers;
SELECT * FROM orders;
SELECT * FROM order_details;
